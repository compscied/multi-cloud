tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml

inputs:

  use_existing_vpc:
    default: false

  existing_vpc_id:
    default: ''

  aws_vpc_cidr:
    default: 10.0.0.0/16

  use_existing_aws_public_subnet:
    default: false

  existing_aws_public_subnet_id:
    default: ''

  aws_public_subnet_cidr:
    default: 10.0.0.0/24

  aws_availability_zone:
    default: us-east-1e

  use_existing_aws_igw:
    default: false

  existing_aws_igw_id:
    default: ''

  use_existing_aws_public_routetable:
    default: false

  existing_aws_public_routetable_id:
    default: ''

  use_existing_aws_nat_instance:
    default: false

  existing_aws_nat_instance_id:
    default: ''

  aws_nat_instance_image_id:
    default: ami-4868ab25

  aws_nat_instance_type:
    default: t2.micro

  use_existing_aws_nat_instance_ip:
    default: false

  existing_aws_nat_instance_ip:
    default: ''

  use_existing_aws_private_subnet:
    default: false

  existing_aws_private_subnet_id:
    default: ''

  aws_private_subnet_cidr:
    default: 10.0.1.0/24

  use_existing_aws_private_routetable:
    default: false

  existing_aws_private_routetable_id:
    default: ''

  use_existing_aws_cloudify_group:
    default: false

  existing_aws_cloudify_group_id:
    default: ''

  use_existing_aws_kubernetes_group:
    default: false

  existing_aws_kubernetes_group_id:
    default: ''

  use_existing_aws_kubernetes_key:
    default: false

  existing_aws_kubernetes_key_id:
    default: ''

dsl_definitions:

  aws_config: &AWS_CONFIG
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  aws_kubernetes_vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      use_external_resource: { get_input: use_existing_vpc }
      resource_id: { get_input: existing_vpc_id }
      cidr_block: { get_input: aws_vpc_cidr }
      aws_config: *AWS_CONFIG

  aws_kubernetes_public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_aws_public_subnet }
      resource_id: { get_input: existing_aws_public_subnet_id }
      cidr_block: { get_input: aws_public_subnet_cidr }
      availability_zone: { get_input: aws_availability_zone }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: aws_kubernetes_vpc

  aws_kubernetes_internet_gateway:
    type: cloudify.aws.nodes.InternetGateway
    properties:
      use_external_resource: { get_input: use_existing_aws_igw }
      resource_id: { get_input: existing_aws_igw_id }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.gateway_connected_to_vpc
        target: aws_kubernetes_vpc

  aws_kubernetes_public_route_table:
    type: cloudify.aws.nodes.RouteTable
    properties:
      use_external_resource: { get_input: use_existing_aws_public_routetable }
      resource_id: { get_input: existing_aws_public_routetable_id }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: aws_kubernetes_vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: aws_kubernetes_public_subnet
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: aws_kubernetes_internet_gateway

  aws_kubernetes_nat_gateway_instance:
    type: cloudify.aws.nodes.Instance
    properties:
      use_external_resource: { get_input: use_existing_aws_nat_instance }
      resource_id: { get_input: existing_aws_nat_instance_id }
      name: NAT
      image_id: { get_input: aws_nat_instance_image_id }
      instance_type: { get_input: aws_nat_instance_type }
      agent_config:
        install_method: none
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: aws_kubernetes_public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: aws_kubernetes_nat_gateway_elastic_ip

  aws_kubernetes_nat_gateway_elastic_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      use_external_resource: { get_input: use_existing_aws_nat_instance_ip }
      resource_id: { get_input: existing_aws_nat_instance_ip }
      aws_config: *AWS_CONFIG
      domain: vpc

  aws_kubernetes_private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_aws_private_subnet }
      resource_id: { get_input: existing_aws_private_subnet_id }
      cidr_block: { get_input: aws_private_subnet_cidr }
      availability_zone: { get_input: aws_availability_zone }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: aws_kubernetes_vpc

  aws_kubernetes_private_route_table:
    type: cloudify.aws.nodes.RouteTable
    properties:
      use_external_resource: { get_input: use_existing_aws_private_routetable }
      resource_id: { get_input: existing_aws_private_routetable_id }
      aws_config: *AWS_CONFIG
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.vpc.routetable.create_route_table
          inputs:
            routes:
              - destination_cidr_block: 0.0.0.0/0
                instance_id: { get_attribute: [ aws_kubernetes_nat_gateway_instance, aws_resource_id ] }
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: aws_kubernetes_vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: aws_kubernetes_private_subnet
      - type: cloudify.relationships.connected_to
        target: aws_kubernetes_nat_gateway_instance

  aws_cloudify_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      use_external_resource: { get_input: use_existing_aws_cloudify_group }
      resource_id: { get_input: existing_aws_cloudify_group_id }
      aws_config: *AWS_CONFIG
      description: Compute Security Group
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: tcp
          from_port: 5985
          to_port: 5985
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: aws_kubernetes_vpc

  aws_kubernetes_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      use_external_resource: { get_input: use_existing_aws_kubernetes_group }
      resource_id: { get_input: existing_aws_kubernetes_group_id }
      aws_config: *AWS_CONFIG
      description: Compute Security Group
      rules:
        - ip_protocol: tcp
          from_port: 53
          to_port: 53
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: udp
          from_port: 53
          to_port: 53
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: tcp
          from_port: 2379
          to_port: 2379
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: tcp
          from_port: 4001
          to_port: 4001
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: tcp
          from_port: 6443
          to_port: 6443
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: tcp
          from_port: 8000
          to_port: 8000
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 9090
          to_port: 9090
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
        - ip_protocol: tcp
          from_port: 10250
          to_port: 10250
          cidr_ip: { get_property: [aws_kubernetes_vpc, cidr_block] }
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: aws_kubernetes_vpc

