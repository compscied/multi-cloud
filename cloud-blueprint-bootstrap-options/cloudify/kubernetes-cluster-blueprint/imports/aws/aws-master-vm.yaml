tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml

inputs:

  use_existing_aws_kubernetes_master_ip:
    default: false

  existing_aws_kubernetes_ip_id:
    default: ''

  use_existing_aws_kubernetes_master_vm_key:
    default: false

  existing_aws_kubernetes_master_vm_key_name:
    default: kubernetes_master_vm_key

  master_agent_local_path_to_key_file:
    type: string
    default: ~/.ssh/kubernetes-master-vm-key.pem

  use_existing_aws_instance_for_master_vm:
    default: false

  existing_aws_instance_for_master_vm:
    default: ''

  aws_instance_master_vm_name:
    default: Kubernetes Master VM

  master_agent_username:
    default: ubuntu

  master_agent_port:
    default: 22

  master_aws_image_id:
    default: ami-2d39803a

  master_aws_instance_type:
    default: m3.medium

dsl_definitions:

  aws_config: &AWS_CONFIG
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  kubernetes_master_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      use_external_resource: { get_input: use_existing_aws_kubernetes_master_ip }
      resource_id: { existing_aws_kubernetes_ip_id }
      domain: vpc
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.relationships.depends_on
        target: aws_kubernetes_internet_gateway

  aws_kubernetes_master_vm_key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_aws_kubernetes_master_vm_key }
      resource_id: { get_input: existing_aws_kubernetes_master_vm_key_name }
      private_key_path: { get_input: master_agent_local_path_to_key_file }
      aws_config: *AWS_CONFIG

  kubernetes_master_vm:
    type: cloudify.aws.nodes.Instance
    properties:
      use_external_resource: { get_input: use_existing_aws_instance_for_master_vm }
      resource_id: { existing_aws_instance_for_master_vm }
      name: { get_input: aws_instance_master_vm_name }
      agent_config:
        user: { get_input: master_agent_username }
        key: { get_input: master_agent_local_path_to_key_file }
        port: { get_input: master_agent_port }
        env:
          K8S_VERSION: { get_input: your_kubernetes_version }
          ETCD_VERSION: { get_input: your_etcd_version }
          FLANNEL_VERSION: { get_input: your_flannel_version }
          FLANNEL_IFACE: { get_input: flannel_interface }
          FLANNEL_IPMASQ: { get_input: flannel_ipmasq_flag }
      image_id: { get_input: master_aws_image_id }
      instance_type: { get_input: master_aws_instance_type }
      parameters:
        placement: { get_property: [ aws_kubernetes_public_subnet, availability_zone ] }
        user_data: |
          #!/bin/bash
          sudo groupadd docker
          sudo gpasswd -a ubuntu docker
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: aws_kubernetes_public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: aws_cloudify_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: aws_kubernetes_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: aws_kubernetes_master_vm_key
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: kubernetes_master_ip

outputs:

  Kubernetes_Dashboard:
    description: Kubernetes Dashboard URL
    value:
      url: {concat: ["http://",{ get_attribute: [ kubernetes_master_ip, aws_resource_id ]},":8080/ui" ] }
