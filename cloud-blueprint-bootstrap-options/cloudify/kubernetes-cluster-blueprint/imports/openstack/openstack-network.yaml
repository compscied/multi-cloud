tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml

inputs:

  ### Openstack
  openstack_external_network_name:
    type: string

  use_existing_openstack_router:
    default: false

  existing_openstack_router_id:
    default: ''

  use_existing_openstack_network:
    default: false

  existing_openstack_network_id:
    default: ''

  use_existing_openstack_public_subnet:
    default: false

  existing_openstack_public_subnet_id:
    default: ''

  openstack_public_subnet_cidr:
    default: 10.10.10.0/24

  use_existing_openstack_cloudify_group:
    default: false

  existing_cloudify_group_id:
    default: ''

  use_existing_openstack_port:
    default: false

  existing_openstack_port_id:
    default: ''

dsl_definitions:

  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    nova_url: { get_input: nova_url }
    neutron_url: { get_input: neutron_url }

node_templates:

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: openstack_external_network_name }
      openstack_config: *openstack_configuration

  openstack_kubernetes_network_router:
    type: cloudify.openstack.nodes.Router
    properties:
      use_external_resource: { get_input: use_existing_openstack_router }
      resource_id: { get_input: existing_openstack_router_id }
      openstack_config: *openstack_configuration
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  openstack_kubernetes_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_openstack_network }
      resource_id: { get_input: existing_openstack_network_id }
      openstack_config: *openstack_configuration

  openstack_kubernetes_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_openstack_public_subnet }
      resource_id: { get_input: existing_openstack_public_subnet_id }
      subnet:
        ip_version: 4
        cidr: { get_input: openstack_public_subnet_cidr }
        dns_nameservers:  [ 8.8.4.4, 8.8.8.8 ]
      openstack_config: *openstack_configuration
    relationships:
      - target: openstack_kubernetes_network
        type: cloudify.relationships.contained_in

  openstack_cloudify_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      use_external_resource: { get_input: use_existing_openstack_cloudify_group }
      resource_id: { get_input: existing_cloudify_group_id }
      security_group:
        description: Security group for Cloudify agent VMs
      rules:
        - port: 22
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
        - port: 5985
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
      openstack_config: *openstack_configuration

  openstack_kubernetes_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      security_group:
        name: kubernetes_security_group
        description: kubernetes master security group
      rules:
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 53
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 53
          protocol: udp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 80
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 443
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 2379
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 4001
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 6443
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 8000
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 8080
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 9090
          protocol: tcp
        - remote_ip_prefix: { get_property: [ openstack_kubernetes_subnet, subnet, cidr ] }
          port: 10250
          protocol: tcp
