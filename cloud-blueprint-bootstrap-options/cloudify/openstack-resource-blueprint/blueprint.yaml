tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml

inputs:

  #############################
  # Provider specific Inputs
  #############################

  keystone_username:
    default: ''
    type: string

  keystone_password:
    default: ''
    type: string

  keystone_tenant_name:
    default: ''
    type: string

  keystone_url:
    default: ''
    type: string

  region:
    default: ''
    type: string

  nova_url:
    default: ''
    type: string

  neutron_url:
    default: ''
    type: string

  key_name:
    default: 'cloudify'
    type: string

  image_id:
    type: string

  flavor_id:
    type: string

  external_network_name:
    type: string
    default: 'external'

  router_name:
    type: string
    default: cloudify-router

  use_existing_keypair:
    type: boolean
    default: false

  server_name:
    default: cloudify-server
    type: string

  ssh_key_filename:
    default: ~/.ssh/cloudify.pem
    type: string

  network_name:
    default: cloudify-network
    type: string

  subnet_name:
    default: cloudify-subnet
    type: string

  subnet_cidr:
    default: 172.16.0.0/16

  subnet_dns_nameservers:
    default: [ 8.8.8.8, 8.8.4.4 ]

  security_group_name:
    default: cloudify
    type: string

  port_name:
    default: cloudify-port
    type: string

  volume_name:
    default: cloudify-volume
    type: string

  skip_openstack_cert_verification:
    default: false
    type: boolean
    description: Whether (true) or not (false) to allow a non-trusted SSL certificate presented by OpenStack.

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    nova_url: { get_input: nova_url }
    neutron_url: { get_input: neutron_url }
    custom_configuration:
      keystone_client:
        insecure: { get_input: skip_openstack_cert_verification }
      nova_client:
        insecure: { get_input: skip_openstack_cert_verification }
      neutron_client:
        insecure: { get_input: skip_openstack_cert_verification }
      cinder_client:
        insecure: { get_input: skip_openstack_cert_verification }

node_templates:

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: { get_input: router_name }
      openstack_config: *openstack_configuration
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  server_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: network_name }
      openstack_config: *openstack_configuration

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: subnet_name }
      subnet:
        ip_version: 4
        cidr: { get_input: subnet_cidr }
        dns_nameservers: { get_input: subnet_dns_nameservers }
      openstack_config: *openstack_configuration
    relationships:
      - target: network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network
      - type: cloudify.relationships.depends_on
        target: subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: { get_input: security_group_name }
      security_group:
        description: Security group for Cloudify agent VMs
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - port: 5985
          remote_ip_prefix: { get_property: [subnet, subnet, cidr] }
      openstack_config: *openstack_configuration

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_keypair }
      resource_id: { get_input: key_name }
      private_key_path: { get_input: ssh_key_filename }
      openstack_config: *openstack_configuration

  server:
    type: cloudify.openstack.nodes.Server
    properties:
      resource_id: { get_input: server_name }
      agent_config:
        install_method: none
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
      management_network_name: { get_input: network_name }
      openstack_config: *openstack_configuration
    relationships:
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: port
        type: cloudify.openstack.server_connected_to_port
      - target: server_ip
        type: cloudify.openstack.server_connected_to_floating_ip

  volume:
    type: cloudify.openstack.nodes.Volume
    properties:
      volume:
        size: 10
      resource_id: { get_input: volume_name }
      openstack_config: *openstack_configuration
    relationships:
      - target: server
        type: cloudify.openstack.volume_attached_to_server
